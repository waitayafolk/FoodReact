[{"D:\\FoodReact\\frontend\\src\\index.js":"1","D:\\FoodReact\\frontend\\src\\App.js":"2","D:\\FoodReact\\frontend\\src\\reportWebVitals.js":"3","D:\\FoodReact\\frontend\\src\\component\\Leftmenu.js":"4","D:\\FoodReact\\frontend\\src\\component\\Login.js":"5","D:\\FoodReact\\frontend\\src\\component\\Orderfood.js":"6","D:\\FoodReact\\frontend\\src\\component\\UserOrderFod.js":"7","D:\\FoodReact\\frontend\\src\\component\\User.js":"8","D:\\FoodReact\\frontend\\src\\component\\TypeFood.js":"9","D:\\FoodReact\\frontend\\src\\component\\Food.js":"10","D:\\FoodReact\\frontend\\src\\component\\Connect.js":"11"},{"size":500,"mtime":1628339771260,"results":"12","hashOfConfig":"13"},{"size":657,"mtime":1629510686573,"results":"14","hashOfConfig":"13"},{"size":362,"mtime":1628339771313,"results":"15","hashOfConfig":"13"},{"size":7694,"mtime":1629510686574,"results":"16","hashOfConfig":"13"},{"size":3035,"mtime":1629541511475,"results":"17","hashOfConfig":"13"},{"size":14530,"mtime":1629545022306,"results":"18","hashOfConfig":"13"},{"size":9427,"mtime":1629541953536,"results":"19","hashOfConfig":"13"},{"size":6995,"mtime":1629541534634,"results":"20","hashOfConfig":"13"},{"size":7182,"mtime":1629541526009,"results":"21","hashOfConfig":"13"},{"size":7612,"mtime":1629541512176,"results":"22","hashOfConfig":"13"},{"size":48,"mtime":1629540622478,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"jqmc2y",{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"26"},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"26"},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"26"},{"filePath":"38","messages":"39","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"26"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"26"},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"26"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"26"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"D:\\FoodReact\\frontend\\src\\index.js",[],["54","55"],"D:\\FoodReact\\frontend\\src\\App.js",["56"],"import './App.css';\r\nimport {\r\n  BrowserRouter as Router ,\r\n  Switch,\r\n  Route,\r\n  Link\r\n} from \"react-router-dom\"\r\nimport Login from \"./component/Login\"\r\nimport Leftmenu from \"./component/Leftmenu\"\r\nimport Orderfood from \"./component/Orderfood\"\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n    <div>\r\n      <Router>\r\n        <Switch>\r\n          <Route path=\"/orderFood\">\r\n            <Orderfood />\r\n          </Route>\r\n          <Route path=\"/users\">\r\n            <Leftmenu />\r\n          </Route>\r\n          <Route path=\"/\">\r\n            <Login />\r\n          </Route>\r\n        </Switch>\r\n      </Router>\r\n    </div>\r\n\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","D:\\FoodReact\\frontend\\src\\reportWebVitals.js",[],"D:\\FoodReact\\frontend\\src\\component\\Leftmenu.js",["57","58"],"import React from 'react';\r\nimport clsx from 'clsx';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport { useHistory } from 'react-router';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport List from '@material-ui/core/List';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Badge from '@material-ui/core/Badge';\r\nimport Container from '@material-ui/core/Container';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport NotificationsIcon from '@material-ui/icons/Notifications';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport DashboardIcon from '@material-ui/icons/Dashboard';\r\nimport ShoppingCartIcon from '@material-ui/icons/ShoppingCart';\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\nimport Swal from 'sweetalert2';\r\nimport {\r\n BrowserRouter as Router,\r\n Switch,\r\n Route,\r\n Link\r\n} from \"react-router-dom\"\r\nimport User from './User';\r\nimport TypeFood from './TypeFood';\r\nimport Food from'./Food';\r\nimport OrderUserFood from'./UserOrderFod';\r\n\r\n\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n  },\r\n  toolbar: {\r\n    paddingRight: 24,\r\n  },\r\n  toolbarIcon: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'flex-end',\r\n    padding: '0 8px',\r\n    ...theme.mixins.toolbar,\r\n  },\r\n  appBar: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    transition: theme.transitions.create(['width', 'margin'], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n  },\r\n  appBarShift: {\r\n    marginLeft: drawerWidth,\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    transition: theme.transitions.create(['width', 'margin'], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  menuButton: {\r\n    marginRight: 36,\r\n  },\r\n  menuButtonHidden: {\r\n    display: 'none',\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  drawerPaper: {\r\n    position: 'relative',\r\n    whiteSpace: 'nowrap',\r\n    width: drawerWidth,\r\n    transition: theme.transitions.create('width', {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  drawerPaperClose: {\r\n    overflowX: 'hidden',\r\n    transition: theme.transitions.create('width', {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    width: theme.spacing(7),\r\n    [theme.breakpoints.up('sm')]: {\r\n      width: theme.spacing(9),\r\n    },\r\n  },\r\n  appBarSpacer: theme.mixins.toolbar,\r\n  content: {\r\n    flexGrow: 1,\r\n    height: '100vh',\r\n    overflow: 'auto',\r\n  },\r\n  container: {\r\n    paddingTop: theme.spacing(4),\r\n    paddingBottom: theme.spacing(4),\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    display: 'flex',\r\n    overflow: 'auto',\r\n    flexDirection: 'column',\r\n    width:'100%',\r\n  },\r\n  fixedHeight: {\r\n   \r\n  },\r\n}));\r\n\r\nexport default function Dashboard() {\r\n  const history = useHistory()\r\n  const classes = useStyles();\r\n  const [open, setOpen] = React.useState(true);\r\n  const handleDrawerOpen = () => {\r\n    setOpen(true);\r\n  };\r\n  const handleDrawerClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const page = (url) => {\r\n   history.push(url)\r\n   window.location.reload()\r\n  }\r\n\r\n  const logout = (url)=>{\r\n   Swal.fire({\r\n    title: 'ต้องการออกจาระบบหรือไม่?',\r\n    text: \"ต้องการออกจาระบบหรือไม่!\",\r\n    icon: 'warning',\r\n    showCancelButton: true,\r\n    confirmButtonColor: '#3085d6',\r\n    cancelButtonColor: '#d33',\r\n    confirmButtonText: 'Yes, delete it!'\r\n  }).then((result) => {\r\n    if (result.isConfirmed) {\r\n     localStorage.removeItem('User')\r\n     history.push(url)\r\n    }\r\n  })\r\n  \r\n  }\r\n\r\n  const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\r\n\r\n\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <CssBaseline />\r\n      <AppBar position=\"absolute\" className={clsx(classes.appBar, open && classes.appBarShift)}>\r\n        <Toolbar className={classes.toolbar}>\r\n          <IconButton\r\n            edge=\"start\"\r\n            color=\"inherit\"\r\n            aria-label=\"open drawer\"\r\n            onClick={handleDrawerOpen}\r\n            className={clsx(classes.menuButton, open && classes.menuButtonHidden)}\r\n          >\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography component=\"h1\" variant=\"h6\" color=\"inherit\" noWrap className={classes.title}>\r\n            Admin\r\n          </Typography>\r\n          <IconButton color=\"inherit\">\r\n            <Badge badgeContent={4} color=\"secondary\">\r\n              <NotificationsIcon />\r\n            </Badge>\r\n          </IconButton>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Drawer\r\n        variant=\"permanent\"\r\n        classes={{\r\n          paper: clsx(classes.drawerPaper, !open && classes.drawerPaperClose),\r\n        }}\r\n        open={open}\r\n      >\r\n        <div className={classes.toolbarIcon}>\r\n          <IconButton onClick={handleDrawerClose}>\r\n            <ChevronLeftIcon />\r\n          </IconButton>\r\n        </div>\r\n        <Divider />\r\n        <List>\r\n\r\n          <ListItem button onClick={()=>{page(\"/users/OrderUserFood\")}} >\r\n            <ListItemIcon>\r\n              <DashboardIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Order Food\"/>\r\n          </ListItem>\r\n\r\n          <ListItem button onClick={()=>{page(\"/users\")}} >\r\n            <ListItemIcon>\r\n              <DashboardIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"User\"/>\r\n          </ListItem>\r\n\r\n          <ListItem button onClick={()=>{page(\"/users/TypeFood\")}}>\r\n            <ListItemIcon>\r\n              <DashboardIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Food Type\"/>\r\n          </ListItem>\r\n\r\n          <ListItem button onClick={()=>{page(\"/users/Food\")}}>\r\n            <ListItemIcon>\r\n              <DashboardIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Food\"/>\r\n          </ListItem>\r\n\r\n          <ListItem button onClick={()=>{logout(\"/\")}}>\r\n            <ListItemIcon>\r\n              <ArrowBackIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Logout\"/>\r\n          </ListItem>\r\n\r\n        </List>\r\n        <Divider />\r\n      </Drawer>\r\n      <main className={classes.content}>\r\n      <div className={classes.appBarSpacer} />\r\n        <Container maxWidth=\"xl\" className={classes.container}>\r\n          <Paper className={fixedHeightPaper}>\r\n            <Router>\r\n              <Switch>\r\n\r\n                <Route path=\"/users/OrderUserFood\">\r\n                  <OrderUserFood />\r\n                </Route>\r\n\r\n                <Route path=\"/users/Food\">\r\n                  <Food />\r\n                </Route>\r\n\r\n                <Route path=\"/users/TypeFood\">\r\n                 <TypeFood />\r\n                </Route>\r\n\r\n                <Route path=\"/users\">\r\n                 <User />\r\n                </Route>\r\n\r\n              </Switch>\r\n             </Router>\r\n           </Paper>\r\n        </Container>\r\n      </main>\r\n    </div>\r\n  );\r\n}","D:\\FoodReact\\frontend\\src\\component\\Login.js",["59"],"import React , {useState } from 'react';\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport axios from 'axios';\nimport {hostname} from './Connect'\nimport Swal from 'sweetalert2';\nimport { useHistory } from 'react-router';\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    marginTop: theme.spacing(8),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n  form: {\n    width: '100%', // Fix IE 11 issue.\n    marginTop: theme.spacing(1),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}));\n\nexport default function Login() {\n  const [user , setUser] = useState()\n  const classes = useStyles();\n  const History = useHistory();\n\n  const login_user = async() => {\n   let url = hostname + '/login';\n   let rs = await axios.post(url,{username :  user.username , password : user.password})\n   if(rs.data.message == \"Login Success\"){\n    localStorage.setItem('User',JSON.stringify(rs.data.user))\n    Swal.fire({\n     icon: 'success',\n     title: 'Login Success',\n     showConfirmButton: false,\n     timer: 1500\n    })\n    History.push('/users')\n   }else{\n    Swal.fire({\n     icon: 'error',\n     title: 'Login Fails',\n     showConfirmButton: false,\n     timer: 1500\n    })\n   }\n  }\n  const handdeluse =(e)=>{\n   setUser({...user, [e.target.name] : e.target.value})\n  }\n\n  return (\n    <Container component=\"main\" maxWidth=\"xs\">\n      <CssBaseline />\n      <div className={classes.paper}>\n        <Avatar className={classes.avatar}>\n          <LockOutlinedIcon />\n        </Avatar>\n        <Typography component=\"h1\" variant=\"h5\">\n          Sign in\n        </Typography>\n        <form className={classes.form} noValidate>\n          <TextField\n            variant=\"outlined\"\n            margin=\"normal\"\n            required\n            fullWidth\n            id=\"name\"\n            label=\"Username\"\n            name=\"username\"\n            autoFocus\n            onChange={handdeluse}\n          />\n          <TextField\n            variant=\"outlined\"\n            margin=\"normal\"\n            required\n            fullWidth\n            name=\"password\"\n            label=\"Password\"\n            type=\"password\"\n            id=\"password\"\n            autoComplete=\"current-password\"\n            onChange={handdeluse}\n          />\n         \n          <Button\n            onClick={()=>{login_user()}}\n            fullWidth\n            variant=\"contained\"\n            color=\"primary\"\n            className={classes.submit}\n          >\n            Sign In\n          </Button>\n        </form>\n      </div>\n    </Container>\n  );\n}","D:\\FoodReact\\frontend\\src\\component\\Orderfood.js",["60"],"D:\\FoodReact\\frontend\\src\\component\\UserOrderFod.js",["61","62","63"],"import React, {useEffect, useState} from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport axios from 'axios';\r\nimport { hostname } from './Connect';\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableFooter,\r\n  TableHead,\r\n  TableRow,\r\n} from '@material-ui/core'\r\nimport Paper from '@material-ui/core/Paper';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport Swal from 'sweetalert2';\r\nimport DetailsIcon from '@material-ui/icons/Details';\r\nimport Slide from '@material-ui/core/Slide';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    '& > *': {\r\n      margin: theme.spacing(1),\r\n    },\r\n  },\r\n}));\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n  return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nexport default function UserOrderFod() {\r\n  const classes = useStyles();\r\n  const [orderlist , setOrderlist] = useState(false)\r\n  const [detailorder , setdetail] = useState(false)\r\n  const [modaldetail , setModaldetail] = useState(false)\r\n  useEffect(()=>{\r\n   LoadOrder()\r\n  },[])\r\n  const LoadOrder = async()=>{\r\n   let url = hostname + '/order_food/load_Order_user'\r\n   let rs = await axios.get(url)\r\n   setOrderlist(rs.data)\r\n  }\r\n\r\n  const detail = (item) => {\r\n    setModaldetail(true)\r\n    setdetail(item)\r\n   };\r\n\r\n   \r\n   const SuccessOrder =  (item)=>{\r\n    Swal.fire({\r\n     title: 'กำลังนำเสริฟ Order นี้หรือไม่?',\r\n     text: \"คุณต้องการลบใช่ไหม!\",\r\n     icon: 'warning',\r\n     showCancelButton: true,\r\n     confirmButtonColor: '#3085d6',\r\n     cancelButtonColor: '#d33',\r\n     confirmButtonText: 'Yes, delete it!'\r\n   }).then(async(result) => {\r\n     if (result.isConfirmed) {\r\n      let url = hostname + '/order/order_serve/'+item.id\r\n      let rs = await axios.get(url)\r\n      if(rs.data.message == \"Success\"){\r\n       Swal.fire({\r\n        icon: 'success',\r\n        title: 'Delete Success',\r\n        showConfirmButton: false,\r\n        timer: 1500\r\n       })\r\n       LoadOrder()\r\n      }else{\r\n       Swal.fire({\r\n        icon: 'Error',\r\n        title: 'Delete Error',\r\n        showConfirmButton: false,\r\n        timer: 1500\r\n       })\r\n      }\r\n     }\r\n   })\r\n   }\r\n\r\n\r\n  const deleteOrder =  (item)=>{\r\n   Swal.fire({\r\n    title: 'จะลบ Order นี้หรือไม่?',\r\n    text: \"คุณต้องการลบใช่ไหม!\",\r\n    icon: 'warning',\r\n    showCancelButton: true,\r\n    confirmButtonColor: '#3085d6',\r\n    cancelButtonColor: '#d33',\r\n    confirmButtonText: 'Yes, delete it!'\r\n  }).then(async(result) => {\r\n    if (result.isConfirmed) {\r\n     let url = hostname + '/order/delete_order/'+item.id\r\n     let rs = await axios.get(url)\r\n     if(rs.data.message == \"Success\"){\r\n      Swal.fire({\r\n       icon: 'success',\r\n       title: 'Delete Success',\r\n       showConfirmButton: false,\r\n       timer: 1500\r\n      })\r\n      LoadOrder()\r\n     }else{\r\n      Swal.fire({\r\n       icon: 'Error',\r\n       title: 'Delete Error',\r\n       showConfirmButton: false,\r\n       timer: 1500\r\n      })\r\n     }\r\n    }\r\n  })\r\n  }\r\n\r\n  return (\r\n   <>\r\n      <TableContainer component={Paper}>\r\n       <Table className={classes.table} aria-label=\"simple table\">\r\n         <TableHead>\r\n           <TableRow>\r\n             <TableCell>ชื่อผู้สั่ง </TableCell>\r\n             <TableCell align=\"right\">โต๊ะ</TableCell>\r\n             <TableCell align=\"right\">สถานะ</TableCell>\r\n             <TableCell align=\"right\"></TableCell>\r\n           </TableRow>\r\n         </TableHead>\r\n         <TableBody>\r\n          {(orderlist.length > 0) ? \r\n              <>\r\n               {orderlist.map((item) => (\r\n             <TableRow>\r\n               <TableCell component=\"th\" scope=\"row\" style={{minWidth : 150}}>\r\n                 {item.customer_name}\r\n               </TableCell>\r\n               <TableCell align=\"right\" style={{minWidth : 150}}>{item.customer_table}</TableCell>\r\n               <TableCell align=\"right\" style={{minWidth : 150}}>{item.status}</TableCell>\r\n               <TableCell align=\"right\" style={{minWidth : 300}}>\r\n                  <Button\r\n                      onClick={()=>{SuccessOrder(item)}}\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                      className={classes.button}\r\n                      startIcon={<DetailsIcon />}\r\n                  >\r\n                      เสริฟ\r\n                  </Button>\r\n                  &nbsp; &nbsp;\r\n                  <Button\r\n                      onClick={()=>{detail(item)}}\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                      className={classes.button}\r\n                      startIcon={<DetailsIcon />}\r\n                  >\r\n                      รายละเอียด\r\n                  </Button>\r\n                  &nbsp; &nbsp;\r\n                  <Button\r\n                      onClick={()=>{deleteOrder(item)}}\r\n                      variant=\"contained\"\r\n                      color=\"secondary\"\r\n                      className={classes.button}\r\n                      startIcon={<DeleteIcon />}\r\n                  >\r\n                      Delete\r\n                  </Button>\r\n               \r\n                \r\n               </TableCell>\r\n             </TableRow>\r\n           ))}\r\n              </>\r\n              :null}\r\n         </TableBody>\r\n       </Table>\r\n     </TableContainer>\r\n      <Detail\r\n        data={detailorder}\r\n        isOpen={modaldetail}\r\n        isClose={() => setModaldetail(false)}\r\n      />\r\n   </>\r\n  );\r\n}  \r\n\r\n\r\nfunction Detail(props) {\r\n  const [Food , setFood] = useState(false)\r\n  const [totalPrice, setTotalPrice] = useState(false);\r\n  const [count , setCount] = useState(0)\r\n\r\n  useEffect(()=>{\r\n    LoadFood()\r\n  },[])\r\n\r\n  const LoadFood = async()=>{\r\n    console.log(props.data)\r\n    let url = hostname + '/order_detail/load_detailOrder_food/'+props.data.id\r\n    let rs = await axios.get(url)\r\n    setFood(rs.data)\r\n    let Price = 0\r\n    let itemsInproductCount = 0;\r\n    for (let i = 0; i < Food.length; i++) {\r\n      itemsInproductCount += Food[i].qty\r\n      Price += (Number(Food[i].price_food) * Number(Food[i].qty))\r\n      setCount(itemsInproductCount)\r\n      setTotalPrice(Price)\r\n  }\r\n\r\n  }\r\n  const derlimiter = (num) =>  {\r\n    return num.toFixed(2).replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,')\r\n  }\r\n  return (\r\n    <>\r\n    <Dialog open={props.isOpen} maxWidth=\"lg\" onClose={() => props.isClose()} TransitionComponent={Transition} aria-labelledby=\"alert-dialog-slide-title\" aria-describedby=\"alert-dialog-slide-description\" >\r\n      <DialogTitle style={{textAlign:'center'}} id=\"alert-dialog-title\">{\"รายการอาหารที่อยู่ในตะกร้า\"}</DialogTitle>\r\n        <DialogContent>\r\n          <Button\r\n            onClick={()=>{LoadFood()}}\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            >\r\n            ดูรายการ\r\n          </Button>\r\n          \r\n          <DialogContentText id=\"alert-dialog-description\">\r\n            <TableHead>\r\n              <TableRow >\r\n                <TableCell align='center' width='150'>ลำดับ</TableCell>\r\n                <TableCell align='center' width='200'>ชื่อรายการ</TableCell>\r\n                <TableCell align='center' width='200'>ราคา</TableCell>\r\n                <TableCell align='center' width='200'>จำนวน</TableCell>\r\n                <TableCell align='center' width='200'>รวม</TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {(Food.length > 0 ) ? <>\r\n              {Food.map((item, index) =>\r\n                <TableRow key={index+1}>\r\n                  <TableCell align=\"center\" style={{minWidth : 150}}>{index+1}</TableCell>\r\n                  <TableCell align=\"center\" style={{minWidth : 150}}>{item.name_food} {item.name_food_en}</TableCell>\r\n                  <TableCell align=\"center\" style={{minWidth : 150}}>{derlimiter(item.price_food)}</TableCell>\r\n                  <TableCell align=\"center\" style={{minWidth : 150}}>{item.qty}</TableCell>\r\n                  <TableCell align=\"center\" style={{minWidth : 150}}>{derlimiter(item.qty * item.price_food)}</TableCell>\r\n                </TableRow>\r\n              )}\r\n              </>:null}\r\n            </TableBody>\r\n            <TableFooter>\r\n              <TableRow>\r\n                <TableCell rowSpan={4} />\r\n                <TableCell colSpan={1}></TableCell>\r\n                <TableCell align=\"center\">รวม</TableCell> \r\n                <TableCell align=\"center\">{count}</TableCell> \r\n                {(totalPrice > 0 ) ? <>\r\n                  <TableCell align=\"center\">{derlimiter(totalPrice)}</TableCell>\r\n                </>: <TableCell align=\"center\">{derlimiter(0)}</TableCell>}\r\n                \r\n              </TableRow>\r\n            </TableFooter>\r\n          </DialogContentText>\r\n        </DialogContent>\r\n    </Dialog>\r\n    </>\r\n  );\r\n}\r\n\r\n\r\n\r\n","D:\\FoodReact\\frontend\\src\\component\\User.js",["64","65"],"import React, {useEffect, useState} from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Radio from '@material-ui/core/Radio';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControl from '@material-ui/core/FormControl';\nimport axios from 'axios';\nimport { hostname } from './Connect';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport Swal from 'sweetalert2';\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    '& > *': {\n      margin: theme.spacing(1),\n    },\n  },\n}));\n\nexport default function User() {\n  const classes = useStyles();\n  const [showModal , setShowModal] = useState(false)\n  const [user , setUser] = useState(false)\n  const [level , setLevel] = useState(\"admin\")\n  const [userlist , setUserlist] = useState(false)\n\n  useEffect(()=>{\n   LoadUser()\n  },[])\n\n  const LoadUser = async()=>{\n   let url = hostname + '/user/load_user'\n   let rs = await axios.get(url)\n   setUserlist(rs.data)\n  }\n  const handleClose = () => {\n   setShowModal(false);\n  };\n\n  const handleChangeReserveData=(e)=>{\n   setUser({...user , [e.target.name]: e.target.value})\n  }\n\n  const handleChange = (e) => {\n   setLevel(e.target.value);\n  };\n  const SaveUser = async() =>{\n   let url = hostname + '/user/save_user'\n   let rs = await axios.post(url,{\n    name : user.name , \n    username : user.username,\n    password : user.password,\n    level : level\n   })\n   if(rs.data.message == 'Save Success'){\n    setShowModal(false);\n    LoadUser()\n    Swal.fire({\n     icon: 'success',\n     title: 'Save Success',\n     showConfirmButton: false,\n     timer: 1500\n    })\n   }else{\n    Swal.fire({\n     icon: 'Error',\n     title: 'Save Error',\n     showConfirmButton: false,\n     timer: 1500\n    })\n   }\n  }\n\n  const deleteUser =  (item)=>{\n   Swal.fire({\n    title: 'จะลบ User นี้หรือไม่?',\n    text: \"คุณต้องการลบใช่ไหม!\",\n    icon: 'warning',\n    showCancelButton: true,\n    confirmButtonColor: '#3085d6',\n    cancelButtonColor: '#d33',\n    confirmButtonText: 'Yes, delete it!'\n  }).then(async(result) => {\n    if (result.isConfirmed) {\n     let url = hostname + '/user/delete_user/'+item.id\n     let rs = await axios.get(url)\n     if(rs.data.message == \"Success\"){\n      Swal.fire({\n       icon: 'success',\n       title: 'Delete Success',\n       showConfirmButton: false,\n       timer: 1500\n      })\n      LoadUser()\n     }else{\n      Swal.fire({\n       icon: 'Error',\n       title: 'Delete Error',\n       showConfirmButton: false,\n       timer: 1500\n      })\n     }\n    }\n  })\n  }\n\n  return (\n   <>\n    <div className={classes.root}>\n      <h3>User / Admin</h3>\n      <Button onClick={() => setShowModal(true)} style={{width : \"15%\"}} variant=\"contained\" color=\"primary\">\n        เพิ่ม User\n      </Button>\n    </div>\n    <Dialog\n        open={showModal}\n        onClose={handleClose}\n        aria-labelledby=\"alert-dialog-title\"\n        aria-describedby=\"alert-dialog-description\"\n    >\n     <DialogTitle id=\"alert-dialog-title\">{\"User Account\"}</DialogTitle>\n        <DialogContent>\n          <DialogContentText id=\"alert-dialog-description\">\n          <form className={classes.form} noValidate>\n            <TextField\n              variant=\"outlined\"\n              margin=\"normal\"\n              required\n              fullWidth\n              id=\"name\"\n              label=\"ชื่อ\"\n              name=\"name\"\n              autoFocus\n              onChange={handleChangeReserveData}\n            />\n            <TextField\n              variant=\"outlined\"\n              margin=\"normal\"\n              required\n              fullWidth\n              id=\"Username\"\n              label=\"Username\"\n              name=\"username\"\n              autoFocus\n              onChange={handleChangeReserveData}\n            />\n            <TextField\n              variant=\"outlined\"\n              margin=\"normal\"\n              required\n              fullWidth\n              name=\"password\"\n              label=\"Password\"\n              type=\"password\"\n              id=\"password\"\n              onChange={handleChangeReserveData}\n            />\n             <div>\n              <FormControl>\n                <RadioGroup aria-label=\"quiz\" name=\"quiz\" value={level} onChange={handleChange}>\n                  <FormControlLabel value=\"admin\" control={<Radio />} label=\"Admin\" />\n                  <FormControlLabel value=\"user\" control={<Radio />} label=\"User\" />\n                </RadioGroup>\n              </FormControl>\n            </div>\n          </form>\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={()=>{SaveUser()}} color=\"primary\">\n            Save\n          </Button>\n        </DialogActions>\n      </Dialog>\n      <br />\n\n      <TableContainer component={Paper}>\n       <Table className={classes.table} aria-label=\"simple table\">\n         <TableHead>\n           <TableRow>\n             <TableCell>ชื่อผู้ใช้งานระบบ</TableCell>\n             <TableCell align=\"right\">Username</TableCell>\n             <TableCell align=\"right\">Level</TableCell>\n             <TableCell align=\"right\"></TableCell>\n           </TableRow>\n         </TableHead>\n         <TableBody>\n          {(userlist.length > 0) ? \n              <>\n               {userlist.map((item) => (\n             <TableRow>\n               <TableCell component=\"th\" scope=\"row\">\n                 {item.name}\n               </TableCell>\n               <TableCell align=\"right\">{item.username}</TableCell>\n               <TableCell align=\"right\">{item.level}</TableCell>\n               <TableCell align=\"right\">\n                <Button\n                    onClick={()=>{deleteUser(item)}}\n                    variant=\"contained\"\n                    color=\"secondary\"\n                    className={classes.button}\n                    startIcon={<DeleteIcon />}\n                  >\n                    Delete\n                  </Button>\n               </TableCell>\n             </TableRow>\n           ))}\n              </>\n              :null}\n         </TableBody>\n       </Table>\n     </TableContainer>\n   </>\n  );\n}\n","D:\\FoodReact\\frontend\\src\\component\\TypeFood.js",["66","67","68","69","70","71"],"import React, {useEffect, useState} from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport axios from 'axios';\r\nimport { hostname } from './Connect';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport Swal from 'sweetalert2';\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    '& > *': {\r\n      margin: theme.spacing(1),\r\n    },\r\n  },\r\n}));\r\n\r\n\r\nexport default function Groupproduct() {\r\n  const classes = useStyles();\r\n  const [showModal , setShowModal] = useState(false)\r\n  const [typefood , setTypefood] = useState(false)\r\n  const [typefoodlist , setTypefoodlist] = useState(false)\r\n\r\n  useEffect(()=>{\r\n    LoadTpefood()\r\n  },[])\r\n\r\n  const LoadTpefood = async()=>{\r\n   let url = hostname + '/type_food/load_type_food'\r\n   let rs = await axios.get(url)\r\n   setTypefoodlist(rs.data)\r\n  }\r\n  const handleClose = () => {\r\n   setShowModal(false);\r\n  };\r\n\r\n  const handleChangeReserveData=(e)=>{\r\n    setTypefood({...typefood , [e.target.name]: e.target.value})\r\n  }\r\n\r\n\r\n  const SaveTypefood = async() =>{\r\n   let url = hostname + '/type_food/save_type_food'\r\n   let rs = await axios.post(url,{\r\n    group_food_code : typefood.group_food_code , \r\n    name_group_food : typefood.name_group_food,\r\n    name_group_food_en : typefood.name_group_food_en\r\n   })\r\n   if(rs.data.message == 'Save Success'){\r\n    setShowModal(false);\r\n    LoadTpefood()\r\n    Swal.fire({\r\n     icon: 'success',\r\n     title: 'Save Success',\r\n     showConfirmButton: false,\r\n     timer: 1500\r\n    })\r\n   }else{\r\n    Swal.fire({\r\n     icon: 'Error',\r\n     title: 'Save Error',\r\n     showConfirmButton: false,\r\n     timer: 1500\r\n    })\r\n   }\r\n  }\r\n\r\n  const deleteTypeFood =  (item)=>{\r\n   Swal.fire({\r\n    title: 'จะลบ ประเภทอาหาร นี้หรือไม่?',\r\n    text: \"คุณต้องการลบใช่ไหม!\",\r\n    icon: 'warning',\r\n    showCancelButton: true,\r\n    confirmButtonColor: '#3085d6',\r\n    cancelButtonColor: '#d33',\r\n    confirmButtonText: 'Yes, delete it!'\r\n  }).then(async(result) => {\r\n    if (result.isConfirmed) {\r\n     let url = hostname + '/type_food/delete_type_food/'+item.id\r\n     let rs = await axios.get(url)\r\n     if(rs.data.message == \"Success\"){\r\n      Swal.fire({\r\n       icon: 'success',\r\n       title: 'Delete Success',\r\n       showConfirmButton: false,\r\n       timer: 1500\r\n      })\r\n      LoadTpefood()\r\n     }else{\r\n      Swal.fire({\r\n       icon: 'Error',\r\n       title: 'Delete Error',\r\n       showConfirmButton: false,\r\n       timer: 1500\r\n      })\r\n     }\r\n    }\r\n  })\r\n  }\r\n\r\n  return (\r\n   <>\r\n    <div className={classes.root}>\r\n      <h3>ประเภทอาหาร</h3>\r\n      <Button onClick={() => setShowModal(true)} style={{width : \"15%\"}} variant=\"contained\" color=\"primary\">\r\n        เพิ่ม ประเภทอาหาร\r\n      </Button>\r\n    </div>\r\n    <Dialog\r\n        open={showModal}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"alert-dialog-title\"\r\n        aria-describedby=\"alert-dialog-description\"\r\n    >\r\n     <DialogTitle id=\"alert-dialog-title\">{\"เพิ่ม ประเภทอาหาร\"}</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText id=\"alert-dialog-description\">\r\n          <form className={classes.form} noValidate>\r\n            <TextField\r\n              variant=\"outlined\"\r\n              margin=\"normal\"\r\n              required\r\n              fullWidth\r\n              id=\"name_group_food\"\r\n              label=\"ชื่อ\"\r\n              name=\"name_group_food\"\r\n              autoFocus\r\n              onChange={handleChangeReserveData}\r\n            />\r\n            <TextField\r\n              variant=\"outlined\"\r\n              margin=\"normal\"\r\n              required\r\n              fullWidth\r\n              id=\"name_group_food_en\"\r\n              label=\"ชื่อภาษาอังกฤษ\"\r\n              name=\"name_group_food_en\"\r\n              onChange={handleChangeReserveData}\r\n            />\r\n            <TextField\r\n              variant=\"outlined\"\r\n              margin=\"normal\"\r\n              required\r\n              fullWidth\r\n              name=\"group_food_code\"\r\n              label=\"รหัสประเภทอาหาร\"\r\n              type=\"text\"\r\n              id=\"group_food_code\"\r\n              onChange={handleChangeReserveData}\r\n            />\r\n             <div>\r\n            </div>\r\n          </form>\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={()=>{SaveTypefood()}} color=\"primary\">\r\n            Save\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n      <br />\r\n\r\n      <TableContainer component={Paper}>\r\n       <Table className={classes.table} aria-label=\"simple table\">\r\n         <TableHead>\r\n           <TableRow>\r\n             <TableCell align=\"center\">รหัสประเภทอาหาร</TableCell>\r\n             <TableCell align=\"center\">ชื่อ</TableCell>\r\n             <TableCell align=\"center\">ชื่อภาษาอังกฤษ</TableCell>\r\n             <TableCell align=\"center\"></TableCell>\r\n           </TableRow>\r\n         </TableHead>\r\n         <TableBody>\r\n          {(typefoodlist.length > 0) ? \r\n              <>\r\n               {typefoodlist.map((item) => (\r\n             <TableRow>\r\n               <TableCell align=\"center\" component=\"th\" scope=\"row\">{item.group_food_code}</TableCell>\r\n               <TableCell align=\"center\">{item.name_group_food}</TableCell>\r\n               <TableCell align=\"center\">{item.name_group_food_en}</TableCell>\r\n               <TableCell align=\"center\">\r\n                <Button\r\n                    onClick={()=>{deleteTypeFood(item)}}\r\n                    variant=\"contained\"\r\n                    color=\"secondary\"\r\n                    className={classes.button}\r\n                    startIcon={<DeleteIcon />}\r\n                  >\r\n                    Delete\r\n                  </Button>\r\n               </TableCell>\r\n             </TableRow>\r\n           ))}\r\n              </>\r\n              :null}\r\n         </TableBody>\r\n       </Table>\r\n     </TableContainer>\r\n   </>\r\n  );\r\n}\r\n","D:\\FoodReact\\frontend\\src\\component\\Food.js",["72","73","74","75","76","77"],"import React, {useEffect, useState} from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport axios from 'axios';\r\nimport { hostname } from './Connect';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport Swal from 'sweetalert2';\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    '& > *': {\r\n      margin: theme.spacing(1),\r\n    },\r\n  },\r\n}));\r\n\r\n\r\nexport default function Food() {\r\n  const classes = useStyles();\r\n  const [showModal , setShowModal] = useState(false)\r\n  const [food , setFood] = useState(false)\r\n  const [foodlist , setFoodlist] = useState(false)\r\n\r\n  useEffect(()=>{\r\n    LoadTpefood()\r\n  },[])\r\n\r\n  const LoadTpefood = async()=>{\r\n   let url = hostname + '/food/load_food'\r\n   let rs = await axios.get(url)\r\n   setFoodlist(rs.data)\r\n  }\r\n  const handleClose = () => {\r\n   setShowModal(false);\r\n  };\r\n\r\n  const handleChangeReserveData=(e)=>{\r\n    setFood({...food , [e.target.name]: e.target.value})\r\n  }\r\n  \r\n  const Savefood = async() =>{\r\n   let url = hostname + '/food/save_food'\r\n   let rs = await axios.post(url,{\r\n    name_food : food.name_food , \r\n    name_food_en : food.name_food_en,\r\n    price_food : Number(food.price_food),\r\n    detail_food : food.detail_food\r\n   })\r\n   if(rs.data.message == 'Save Success'){\r\n    setShowModal(false);\r\n    LoadTpefood()\r\n    Swal.fire({\r\n     icon: 'success',\r\n     title: 'Save Success',\r\n     showConfirmButton: false,\r\n     timer: 1500\r\n    })\r\n   }else{\r\n    Swal.fire({\r\n     icon: 'Error',\r\n     title: 'Save Error',\r\n     showConfirmButton: false,\r\n     timer: 1500\r\n    })\r\n   }\r\n  }\r\n\r\n  const deleteFood =  (item)=>{\r\n   Swal.fire({\r\n    title: 'จะลบ รายการอาหาร นี้หรือไม่?',\r\n    text: \"คุณต้องการลบใช่ไหม!\",\r\n    icon: 'warning',\r\n    showCancelButton: true,\r\n    confirmButtonColor: '#3085d6',\r\n    cancelButtonColor: '#d33',\r\n    confirmButtonText: 'Yes, delete it!'\r\n  }).then(async(result) => {\r\n    if (result.isConfirmed) {\r\n     let url = hostname + '/food/delete_food/'+item.id\r\n     let rs = await axios.get(url)\r\n     if(rs.data.message == \"Success\"){\r\n      Swal.fire({\r\n       icon: 'success',\r\n       title: 'Delete Success',\r\n       showConfirmButton: false,\r\n       timer: 1500\r\n      })\r\n      LoadTpefood()\r\n     }else{\r\n      Swal.fire({\r\n       icon: 'Error',\r\n       title: 'Delete Error',\r\n       showConfirmButton: false,\r\n       timer: 1500\r\n      })\r\n     }\r\n    }\r\n  })\r\n  }\r\n\r\n  return (\r\n   <>\r\n    <div className={classes.root}>\r\n      <h3>รายการอาหาร</h3>\r\n      <Button onClick={() => setShowModal(true)} style={{width : \"15%\"}} variant=\"contained\" color=\"primary\">\r\n        เพิ่ม รายการอาหาร\r\n      </Button>\r\n    </div>\r\n      <Dialog\r\n          open={showModal}\r\n          onClose={handleClose}\r\n          aria-labelledby=\"alert-dialog-title\"\r\n          aria-describedby=\"alert-dialog-description\"\r\n      >\r\n     <DialogTitle id=\"alert-dialog-title\">{\"เพิ่ม รายการอาหาร\"}</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText id=\"alert-dialog-description\">\r\n          <form className={classes.form} noValidate>\r\n            <TextField\r\n              variant=\"outlined\"\r\n              margin=\"normal\"\r\n              required\r\n              fullWidth\r\n              id=\"name_food\"\r\n              label=\"ชื่อ\"\r\n              name=\"name_food\"\r\n              autoFocus\r\n              onChange={handleChangeReserveData}\r\n            />\r\n            <TextField\r\n              variant=\"outlined\"\r\n              margin=\"normal\"\r\n              required\r\n              fullWidth\r\n              id=\"name_food_en\"\r\n              label=\"ชื่อภาษาอังกฤษ\"\r\n              name=\"name_food_en\"\r\n              onChange={handleChangeReserveData}\r\n            />\r\n            <TextField\r\n              variant=\"outlined\"\r\n              margin=\"normal\"\r\n              required\r\n              fullWidth\r\n              name=\"price_food\"\r\n              label=\"ราคา\"\r\n              type=\"number\"\r\n              id=\"price_food\"\r\n              onChange={handleChangeReserveData}\r\n            />\r\n            <TextField\r\n              variant=\"outlined\"\r\n              margin=\"normal\"\r\n              required\r\n              fullWidth\r\n              id=\"detail_food\"\r\n              label=\"รายละเอียดอาหาร\"\r\n              name=\"detail_food\"\r\n              onChange={handleChangeReserveData}\r\n            />\r\n             <div>\r\n            </div>\r\n          </form>\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={()=>{Savefood()}} color=\"primary\">\r\n            Save\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n      <br />\r\n\r\n      <TableContainer component={Paper}>\r\n       <Table className={classes.table} aria-label=\"simple table\">\r\n         <TableHead>\r\n           <TableRow>\r\n             <TableCell align=\"center\">ชื่ออาหาร</TableCell>\r\n             <TableCell align=\"center\">ชื่อภาษาอังกฤษ</TableCell>\r\n             <TableCell align=\"right\">ราคา</TableCell>\r\n             <TableCell align=\"center\">รายละเอียดอาหาร</TableCell>\r\n             <TableCell align=\"center\"></TableCell>\r\n           </TableRow>\r\n         </TableHead>\r\n         <TableBody>\r\n          {(foodlist.length > 0) ? \r\n              <>\r\n               {foodlist.map((item) => (\r\n             <TableRow>\r\n               <TableCell component=\"th\" align=\"center\" scope=\"row\" style={{minWidth : 150}}>{item.name_food}</TableCell>\r\n               <TableCell align=\"center\" style={{minWidth : 150}}>{item.name_food_en}</TableCell>\r\n               <TableCell align=\"right\" style={{minWidth : 150}}>{item.price_food}</TableCell>\r\n               <TableCell align=\"center\" style={{minWidth : 150}} >{item.detail_food}</TableCell>\r\n               <TableCell align=\"center\">\r\n                <Button\r\n                    onClick={()=>{deleteFood(item)}}\r\n                    variant=\"contained\"\r\n                    color=\"secondary\"\r\n                    className={classes.button}\r\n                    startIcon={<DeleteIcon />}\r\n                  >\r\n                    Delete\r\n                  </Button>\r\n               </TableCell>\r\n             </TableRow>\r\n           ))}\r\n              </>\r\n              :null}\r\n         </TableBody>\r\n       </Table>\r\n     </TableContainer>\r\n   </>\r\n  );\r\n}\r\n","D:\\FoodReact\\frontend\\src\\component\\Connect.js",[],{"ruleId":"78","replacedBy":"79"},{"ruleId":"80","replacedBy":"81"},{"ruleId":"82","severity":1,"message":"83","line":6,"column":3,"nodeType":"84","messageId":"85","endLine":6,"endColumn":7},{"ruleId":"82","severity":1,"message":"86","line":23,"column":8,"nodeType":"84","messageId":"85","endLine":23,"endColumn":24},{"ruleId":"82","severity":1,"message":"83","line":30,"column":2,"nodeType":"84","messageId":"85","endLine":30,"endColumn":6},{"ruleId":"87","severity":1,"message":"88","line":43,"column":23,"nodeType":"89","messageId":"90","endLine":43,"endColumn":25},{"ruleId":null,"fatal":true,"severity":2,"message":"91","line":158,"column":5},{"ruleId":"87","severity":1,"message":"88","line":71,"column":26,"nodeType":"89","messageId":"90","endLine":71,"endColumn":28},{"ruleId":"87","severity":1,"message":"88","line":105,"column":25,"nodeType":"89","messageId":"90","endLine":105,"endColumn":27},{"ruleId":"92","severity":1,"message":"93","line":204,"column":5,"nodeType":"94","endLine":204,"endColumn":7,"suggestions":"95"},{"ruleId":"87","severity":1,"message":"88","line":68,"column":23,"nodeType":"89","messageId":"90","endLine":68,"endColumn":25},{"ruleId":"87","severity":1,"message":"88","line":100,"column":25,"nodeType":"89","messageId":"90","endLine":100,"endColumn":27},{"ruleId":"82","severity":1,"message":"96","line":10,"column":8,"nodeType":"84","messageId":"85","endLine":10,"endColumn":13},{"ruleId":"82","severity":1,"message":"97","line":11,"column":8,"nodeType":"84","messageId":"85","endLine":11,"endColumn":24},{"ruleId":"82","severity":1,"message":"98","line":12,"column":8,"nodeType":"84","messageId":"85","endLine":12,"endColumn":18},{"ruleId":"82","severity":1,"message":"99","line":13,"column":8,"nodeType":"84","messageId":"85","endLine":13,"endColumn":19},{"ruleId":"87","severity":1,"message":"88","line":65,"column":23,"nodeType":"89","messageId":"90","endLine":65,"endColumn":25},{"ruleId":"87","severity":1,"message":"88","line":97,"column":25,"nodeType":"89","messageId":"90","endLine":97,"endColumn":27},{"ruleId":"82","severity":1,"message":"96","line":10,"column":8,"nodeType":"84","messageId":"85","endLine":10,"endColumn":13},{"ruleId":"82","severity":1,"message":"97","line":11,"column":8,"nodeType":"84","messageId":"85","endLine":11,"endColumn":24},{"ruleId":"82","severity":1,"message":"98","line":12,"column":8,"nodeType":"84","messageId":"85","endLine":12,"endColumn":18},{"ruleId":"82","severity":1,"message":"99","line":13,"column":8,"nodeType":"84","messageId":"85","endLine":13,"endColumn":19},{"ruleId":"87","severity":1,"message":"88","line":65,"column":23,"nodeType":"89","messageId":"90","endLine":65,"endColumn":25},{"ruleId":"87","severity":1,"message":"88","line":97,"column":25,"nodeType":"89","messageId":"90","endLine":97,"endColumn":27},"no-native-reassign",["100"],"no-negated-in-lhs",["101"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'ShoppingCartIcon' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Parsing error: Unexpected reserved word 'let'.\n\n\u001b[0m \u001b[90m 156 |\u001b[39m     \u001b[36mlet\u001b[39m itemsInproduct \u001b[33m=\u001b[39m \u001b[33mJSON\u001b[39m\u001b[33m.\u001b[39mparse(localStorage\u001b[33m.\u001b[39mgetItem(\u001b[32m'itemsInCart'\u001b[39m))\u001b[0m\n\u001b[0m \u001b[90m 157 |\u001b[39m     \u001b[36mlet\u001b[39m \u001b[33mPriitemsInproductCountce\u001b[39m \u001b[33m=\u001b[39m \u001b[35m0\u001b[39m\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 158 |\u001b[39m     \u001b[36mlet\u001b[39m  \u001b[33m=\u001b[39m \u001b[35m0\u001b[39m\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m     |\u001b[39m     \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 159 |\u001b[39m     \u001b[36mif\u001b[39m(itemsInproduct \u001b[33m==\u001b[39m \u001b[36mnull\u001b[39m \u001b[33m||\u001b[39m itemsInproduct \u001b[33m==\u001b[39m undefined){\u001b[0m\n\u001b[0m \u001b[90m 160 |\u001b[39m       setCount(\u001b[35m0\u001b[39m)\u001b[0m\n\u001b[0m \u001b[90m 161 |\u001b[39m       setIndexFood(\u001b[36mfalse\u001b[39m)\u001b[0m","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'LoadFood'. Either include it or remove the dependency array.","ArrayExpression",["102"],"'Radio' is defined but never used.","'FormControlLabel' is defined but never used.","'RadioGroup' is defined but never used.","'FormControl' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"103","fix":"104"},"Update the dependencies array to be: [LoadFood]",{"range":"105","text":"106"},[5967,5969],"[LoadFood]"]