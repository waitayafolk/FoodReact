[{"D:\\FoodReact\\frontend\\src\\index.js":"1","D:\\FoodReact\\frontend\\src\\App.js":"2","D:\\FoodReact\\frontend\\src\\reportWebVitals.js":"3","D:\\FoodReact\\frontend\\src\\component\\Leftmenu.js":"4","D:\\FoodReact\\frontend\\src\\component\\Login.js":"5","D:\\FoodReact\\frontend\\src\\component\\Orderfood.js":"6","D:\\FoodReact\\frontend\\src\\component\\UserOrderFod.js":"7","D:\\FoodReact\\frontend\\src\\component\\User.js":"8","D:\\FoodReact\\frontend\\src\\component\\TypeFood.js":"9","D:\\FoodReact\\frontend\\src\\component\\Food.js":"10","D:\\FoodReact\\frontend\\src\\component\\Connect.js":"11","D:\\FoodReact\\frontend\\src\\component\\modal\\detail.js":"12"},{"size":500,"mtime":1628339771260,"results":"13","hashOfConfig":"14"},{"size":657,"mtime":1629510686573,"results":"15","hashOfConfig":"14"},{"size":362,"mtime":1628339771313,"results":"16","hashOfConfig":"14"},{"size":7694,"mtime":1629510686574,"results":"17","hashOfConfig":"14"},{"size":3046,"mtime":1628345647884,"results":"18","hashOfConfig":"14"},{"size":13732,"mtime":1629521552933,"results":"19","hashOfConfig":"14"},{"size":5217,"mtime":1629527742694,"results":"20","hashOfConfig":"14"},{"size":7022,"mtime":1628349063117,"results":"21","hashOfConfig":"14"},{"size":7212,"mtime":1629513190830,"results":"22","hashOfConfig":"14"},{"size":7663,"mtime":1629517272904,"results":"23","hashOfConfig":"14"},{"size":48,"mtime":1628343095977,"results":"24","hashOfConfig":"14"},{"size":1375,"mtime":1629527431081,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"jqmc2y",{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"28"},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"28"},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"28"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"28"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"28"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"28"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"28"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\FoodReact\\frontend\\src\\index.js",[],["58","59"],"D:\\FoodReact\\frontend\\src\\App.js",["60"],"import './App.css';\r\nimport {\r\n  BrowserRouter as Router ,\r\n  Switch,\r\n  Route,\r\n  Link\r\n} from \"react-router-dom\"\r\nimport Login from \"./component/Login\"\r\nimport Leftmenu from \"./component/Leftmenu\"\r\nimport Orderfood from \"./component/Orderfood\"\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n    <div>\r\n      <Router>\r\n        <Switch>\r\n          <Route path=\"/orderFood\">\r\n            <Orderfood />\r\n          </Route>\r\n          <Route path=\"/users\">\r\n            <Leftmenu />\r\n          </Route>\r\n          <Route path=\"/\">\r\n            <Login />\r\n          </Route>\r\n        </Switch>\r\n      </Router>\r\n    </div>\r\n\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","D:\\FoodReact\\frontend\\src\\reportWebVitals.js",[],"D:\\FoodReact\\frontend\\src\\component\\Leftmenu.js",["61","62"],"import React from 'react';\r\nimport clsx from 'clsx';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport { useHistory } from 'react-router';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport List from '@material-ui/core/List';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Badge from '@material-ui/core/Badge';\r\nimport Container from '@material-ui/core/Container';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport NotificationsIcon from '@material-ui/icons/Notifications';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport DashboardIcon from '@material-ui/icons/Dashboard';\r\nimport ShoppingCartIcon from '@material-ui/icons/ShoppingCart';\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\nimport Swal from 'sweetalert2';\r\nimport {\r\n BrowserRouter as Router,\r\n Switch,\r\n Route,\r\n Link\r\n} from \"react-router-dom\"\r\nimport User from './User';\r\nimport TypeFood from './TypeFood';\r\nimport Food from'./Food';\r\nimport OrderUserFood from'./UserOrderFod';\r\n\r\n\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n  },\r\n  toolbar: {\r\n    paddingRight: 24,\r\n  },\r\n  toolbarIcon: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'flex-end',\r\n    padding: '0 8px',\r\n    ...theme.mixins.toolbar,\r\n  },\r\n  appBar: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    transition: theme.transitions.create(['width', 'margin'], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n  },\r\n  appBarShift: {\r\n    marginLeft: drawerWidth,\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    transition: theme.transitions.create(['width', 'margin'], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  menuButton: {\r\n    marginRight: 36,\r\n  },\r\n  menuButtonHidden: {\r\n    display: 'none',\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  drawerPaper: {\r\n    position: 'relative',\r\n    whiteSpace: 'nowrap',\r\n    width: drawerWidth,\r\n    transition: theme.transitions.create('width', {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  drawerPaperClose: {\r\n    overflowX: 'hidden',\r\n    transition: theme.transitions.create('width', {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    width: theme.spacing(7),\r\n    [theme.breakpoints.up('sm')]: {\r\n      width: theme.spacing(9),\r\n    },\r\n  },\r\n  appBarSpacer: theme.mixins.toolbar,\r\n  content: {\r\n    flexGrow: 1,\r\n    height: '100vh',\r\n    overflow: 'auto',\r\n  },\r\n  container: {\r\n    paddingTop: theme.spacing(4),\r\n    paddingBottom: theme.spacing(4),\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    display: 'flex',\r\n    overflow: 'auto',\r\n    flexDirection: 'column',\r\n    width:'100%',\r\n  },\r\n  fixedHeight: {\r\n   \r\n  },\r\n}));\r\n\r\nexport default function Dashboard() {\r\n  const history = useHistory()\r\n  const classes = useStyles();\r\n  const [open, setOpen] = React.useState(true);\r\n  const handleDrawerOpen = () => {\r\n    setOpen(true);\r\n  };\r\n  const handleDrawerClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const page = (url) => {\r\n   history.push(url)\r\n   window.location.reload()\r\n  }\r\n\r\n  const logout = (url)=>{\r\n   Swal.fire({\r\n    title: 'ต้องการออกจาระบบหรือไม่?',\r\n    text: \"ต้องการออกจาระบบหรือไม่!\",\r\n    icon: 'warning',\r\n    showCancelButton: true,\r\n    confirmButtonColor: '#3085d6',\r\n    cancelButtonColor: '#d33',\r\n    confirmButtonText: 'Yes, delete it!'\r\n  }).then((result) => {\r\n    if (result.isConfirmed) {\r\n     localStorage.removeItem('User')\r\n     history.push(url)\r\n    }\r\n  })\r\n  \r\n  }\r\n\r\n  const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\r\n\r\n\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <CssBaseline />\r\n      <AppBar position=\"absolute\" className={clsx(classes.appBar, open && classes.appBarShift)}>\r\n        <Toolbar className={classes.toolbar}>\r\n          <IconButton\r\n            edge=\"start\"\r\n            color=\"inherit\"\r\n            aria-label=\"open drawer\"\r\n            onClick={handleDrawerOpen}\r\n            className={clsx(classes.menuButton, open && classes.menuButtonHidden)}\r\n          >\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography component=\"h1\" variant=\"h6\" color=\"inherit\" noWrap className={classes.title}>\r\n            Admin\r\n          </Typography>\r\n          <IconButton color=\"inherit\">\r\n            <Badge badgeContent={4} color=\"secondary\">\r\n              <NotificationsIcon />\r\n            </Badge>\r\n          </IconButton>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Drawer\r\n        variant=\"permanent\"\r\n        classes={{\r\n          paper: clsx(classes.drawerPaper, !open && classes.drawerPaperClose),\r\n        }}\r\n        open={open}\r\n      >\r\n        <div className={classes.toolbarIcon}>\r\n          <IconButton onClick={handleDrawerClose}>\r\n            <ChevronLeftIcon />\r\n          </IconButton>\r\n        </div>\r\n        <Divider />\r\n        <List>\r\n\r\n          <ListItem button onClick={()=>{page(\"/users/OrderUserFood\")}} >\r\n            <ListItemIcon>\r\n              <DashboardIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Order Food\"/>\r\n          </ListItem>\r\n\r\n          <ListItem button onClick={()=>{page(\"/users\")}} >\r\n            <ListItemIcon>\r\n              <DashboardIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"User\"/>\r\n          </ListItem>\r\n\r\n          <ListItem button onClick={()=>{page(\"/users/TypeFood\")}}>\r\n            <ListItemIcon>\r\n              <DashboardIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Food Type\"/>\r\n          </ListItem>\r\n\r\n          <ListItem button onClick={()=>{page(\"/users/Food\")}}>\r\n            <ListItemIcon>\r\n              <DashboardIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Food\"/>\r\n          </ListItem>\r\n\r\n          <ListItem button onClick={()=>{logout(\"/\")}}>\r\n            <ListItemIcon>\r\n              <ArrowBackIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Logout\"/>\r\n          </ListItem>\r\n\r\n        </List>\r\n        <Divider />\r\n      </Drawer>\r\n      <main className={classes.content}>\r\n      <div className={classes.appBarSpacer} />\r\n        <Container maxWidth=\"xl\" className={classes.container}>\r\n          <Paper className={fixedHeightPaper}>\r\n            <Router>\r\n              <Switch>\r\n\r\n                <Route path=\"/users/OrderUserFood\">\r\n                  <OrderUserFood />\r\n                </Route>\r\n\r\n                <Route path=\"/users/Food\">\r\n                  <Food />\r\n                </Route>\r\n\r\n                <Route path=\"/users/TypeFood\">\r\n                 <TypeFood />\r\n                </Route>\r\n\r\n                <Route path=\"/users\">\r\n                 <User />\r\n                </Route>\r\n\r\n              </Switch>\r\n             </Router>\r\n           </Paper>\r\n        </Container>\r\n      </main>\r\n    </div>\r\n  );\r\n}","D:\\FoodReact\\frontend\\src\\component\\Login.js",["63","64"],"import React , {useState , useEffect} from 'react';\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport axios from 'axios';\nimport {hostname} from './Connect'\nimport Swal from 'sweetalert2';\nimport { useHistory } from 'react-router';\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    marginTop: theme.spacing(8),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n  form: {\n    width: '100%', // Fix IE 11 issue.\n    marginTop: theme.spacing(1),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}));\n\nexport default function Login() {\n  const [user , setUser] = useState()\n  const classes = useStyles();\n  const History = useHistory();\n\n  const login_user = async() => {\n   let url = hostname + '/login';\n   let rs = await axios.post(url,{username :  user.username , password : user.password})\n   if(rs.data.message == \"Login Success\"){\n    localStorage.setItem('User',JSON.stringify(rs.data.user))\n    Swal.fire({\n     icon: 'success',\n     title: 'Login Success',\n     showConfirmButton: false,\n     timer: 1500\n    })\n    History.push('/users')\n   }else{\n    Swal.fire({\n     icon: 'error',\n     title: 'Login Fails',\n     showConfirmButton: false,\n     timer: 1500\n    })\n   }\n  }\n  const handdeluse =(e)=>{\n   setUser({...user, [e.target.name] : e.target.value})\n  }\n\n  return (\n    <Container component=\"main\" maxWidth=\"xs\">\n      <CssBaseline />\n      <div className={classes.paper}>\n        <Avatar className={classes.avatar}>\n          <LockOutlinedIcon />\n        </Avatar>\n        <Typography component=\"h1\" variant=\"h5\">\n          Sign in\n        </Typography>\n        <form className={classes.form} noValidate>\n          <TextField\n            variant=\"outlined\"\n            margin=\"normal\"\n            required\n            fullWidth\n            id=\"name\"\n            label=\"Username\"\n            name=\"username\"\n            autoFocus\n            onChange={handdeluse}\n          />\n          <TextField\n            variant=\"outlined\"\n            margin=\"normal\"\n            required\n            fullWidth\n            name=\"password\"\n            label=\"Password\"\n            type=\"password\"\n            id=\"password\"\n            autoComplete=\"current-password\"\n            onChange={handdeluse}\n          />\n         \n          <Button\n            onClick={()=>{login_user()}}\n            fullWidth\n            variant=\"contained\"\n            color=\"primary\"\n            className={classes.submit}\n          >\n            Sign In\n          </Button>\n        </form>\n      </div>\n    </Container>\n  );\n}","D:\\FoodReact\\frontend\\src\\component\\Orderfood.js",["65","66","67","68","69","70","71","72"],"import React ,{ useEffect , useState } from 'react';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Button from '@material-ui/core/Button';\r\nimport FastfoodIcon from '@material-ui/icons/Fastfood';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport ShoppingCartIcon from '@material-ui/icons/ShoppingCart';\r\nimport Link from '@material-ui/core/Link';\r\nimport Swal from 'sweetalert2';\r\nimport axios from 'axios';\r\nimport { hostname } from './Connect';\r\nimport FoodImg from '../asset/image/thaifood.jpg';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport {\r\n  Paper,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableFooter,\r\n  TableHead,\r\n  TableRow,\r\n} from '@material-ui/core'\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  icon: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  heroContent: {\r\n    backgroundColor: theme.palette.background.paper,\r\n    padding: theme.spacing(8, 0, 6),\r\n  },\r\n  heroButtons: {\r\n    marginTop: theme.spacing(4),\r\n  },\r\n  cardGrid: {\r\n    paddingTop: theme.spacing(8),\r\n    paddingBottom: theme.spacing(8),\r\n  },\r\n  card: {\r\n    height: '100%',\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n  },\r\n  cardMedia: {\r\n    paddingTop: '56.25%', // 16:9\r\n  },\r\n  cardContent: {\r\n    flexGrow: 1,\r\n  },\r\n  footer: {\r\n    backgroundColor: theme.palette.background.paper,\r\n    padding: theme.spacing(6),\r\n  },\r\n  root: {\r\n    '& > *': {\r\n      margin: theme.spacing(1),\r\n    },\r\n  },\r\n}));\r\n\r\nfunction Alert(props) {\r\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n  return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nlet myArray\r\nexport default function Orderfood() {\r\n  \r\n  const [count , setCount] = useState(0)\r\n  const [Food , setFood] = useState(false)\r\n  const [open, setOpen] = useState(false);\r\n  const [openerror, setOpenerror] = useState(false);\r\n  const [showModal , setShowModal] = useState(false)\r\n  const [indexFood , setIndexFood] = useState(false)\r\n  const [totalPrice, setTotalPrice] = useState(false);\r\n  const [table , setTable] = useState(false)\r\n  const classes = useStyles();\r\n\r\n  useEffect(()=>{\r\n    LoadFood()\r\n    afterAddItem()\r\n  },[])\r\n\r\n  const LoadFood =  async() =>{\r\n    let url = hostname + '/food/load_food'\r\n    let rs = await axios.get(url)\r\n    setFood(rs.data)\r\n  }\r\n\r\n  const derlimiter = (num) =>  {\r\n    return num.toFixed(2).replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,')\r\n  }\r\n\r\n  const addToCart = (item) => {\r\n    myArray = JSON.parse(localStorage.getItem('itemsInCart'))\r\n    if(myArray === undefined ||myArray === null ){\r\n        myArray = []\r\n        addProductToCart(item)\r\n        return\r\n    }\r\n    if(myArray.length < 0){\r\n    }else{\r\n        for (var i = 0; i < myArray.length; i++) {\r\n            if (myArray[i].id === item.id) {\r\n                myArray[i].qty += 1;\r\n              return saveTolocal(myArray)\r\n            }\r\n        }\r\n        addProductToCart(item)\r\n    }\r\n  }\r\n\r\n  const saveTolocal = (myArray) =>{\r\n      localStorage.setItem('itemsInCart', JSON.stringify(myArray));\r\n      setOpen(true);\r\n      afterAddItem()\r\n  }\r\n\r\n  const addProductToCart = (item) =>{\r\n      myArray.push({ \r\n          id :item.id, \r\n          qty: 1, \r\n          price: item.price_food , \r\n          name_food_en : item.name_food_en,\r\n          name_food: item.name_food,\r\n          detail_food: item.detail_food\r\n      });\r\n      localStorage.setItem('itemsInCart', JSON.stringify(myArray));\r\n      setOpen(true);\r\n      afterAddItem()\r\n  }\r\n\r\n  const afterAddItem = () => {\r\n    let itemsInproduct = JSON.parse(localStorage.getItem('itemsInCart'))\r\n    let Price = 0\r\n    let itemsInproductCount = 0;\r\n    if(itemsInproduct === null){\r\n      setIndexFood(false)\r\n      setTotalPrice(0)\r\n    }else{\r\n      setIndexFood(itemsInproduct)\r\n        itemsInproductCount = 0;\r\n        for (let i = 0; i < itemsInproduct.length; i++) {\r\n            itemsInproductCount += itemsInproduct[i].qty\r\n            Price += (Number(itemsInproduct[i].price) * Number(itemsInproduct[i].qty))\r\n            setCount(itemsInproductCount)\r\n            setTotalPrice(Price)\r\n        }\r\n    } \r\n   \r\n  }\r\n\r\n  const handleClose = ( reason) => {\r\n    if (reason === 'clickaway') {\r\n      return;\r\n    }\r\n    setOpen(false);\r\n    setOpenerror(false)\r\n  };\r\n\r\n  const handleClosemodal = () => {\r\n    setShowModal(false);\r\n  };\r\n\r\n  const handleChangeReserveData=(e)=>{\r\n    setTable({...table , [e.target.name]: e.target.value})\r\n  }\r\n\r\n  const SaveOrder = async()=>{\r\n\r\n    if(table == false || table.table == \"\" || table.name == \"\"){\r\n      setOpenerror(true)\r\n    }else{\r\n      let url = hostname + '/order/save_order'\r\n      let rs = await axios.post(url,{\r\n        customer_name : table.name, \r\n        customer_table : table.table , \r\n        food : indexFood\r\n      })\r\n      if(rs.data.message == 'Save Success'){\r\n        localStorage.removeItem('itemsInCart')\r\n        afterAddItem()\r\n        setTable(false)\r\n        setShowModal(false);\r\n        Swal.fire({\r\n        icon: 'success',\r\n        title: 'Save Success',\r\n        showConfirmButton: false,\r\n        timer: 1500\r\n        })\r\n      }else{\r\n        Swal.fire({\r\n        icon: 'Error',\r\n        title: 'Save Error',\r\n        showConfirmButton: false,\r\n        timer: 1500\r\n        })\r\n      }\r\n\r\n    }\r\n\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <CssBaseline />\r\n      <AppBar position=\"relative\">\r\n        <Toolbar>\r\n          <FastfoodIcon className={classes.icon} />\r\n          <Typography variant=\"h6\" color=\"inherit\" noWrap>\r\n          Kaidee Restaurant\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <main>\r\n        <div className={classes.heroContent}>\r\n          <Container maxWidth=\"sm\">\r\n            <Typography component=\"h1\" variant=\"h2\" align=\"center\" color=\"textPrimary\" gutterBottom>\r\n                Kaidee Restaurant\r\n            </Typography>\r\n            <Typography variant=\"h5\" align=\"center\" color=\"textSecondary\" paragraph>\r\n              สามารถเลือกอาหารที่มีอยู่ได้เลย \r\n            </Typography>\r\n            <div className={classes.heroButtons}>\r\n              <Grid container spacing={2} justifyContent=\"center\">\r\n                <Grid item>\r\n                  <Button onClick={()=>{setShowModal(true)}} variant=\"contained\" color=\"primary\">\r\n                  {count} รายการ\r\n                  </Button>\r\n                </Grid>\r\n              </Grid>\r\n            </div>\r\n          </Container>\r\n        </div>\r\n        <Container className={classes.cardGrid} maxWidth=\"md\">\r\n          {(Food.length > 0) ? <>\r\n            <Grid container spacing={4}>\r\n            {Food.map((item) => (\r\n              <Grid item key={item.id} xs={12} sm={6} md={4}>\r\n                <Card className={classes.card}>\r\n                  <CardMedia\r\n                    className={classes.cardMedia}\r\n                    image={FoodImg}\r\n                    title=\"Image title\"\r\n                  />\r\n                  <CardContent className={classes.cardContent}>\r\n                    <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                    {item.name_food} {item.name_food_en}\r\n                    </Typography>\r\n                    <Typography>\r\n                    {item.detail_food}\r\n                    </Typography>\r\n                    <Typography style={{ fontSize : 20  ,  textAlign :'left' , color : '#ff844c'}}>\r\n                    ราคา {derlimiter(item.price_food)}.-\r\n                    </Typography>\r\n                  </CardContent>\r\n                  <CardActions>\r\n                    <Button\r\n                      onClick={()=>{addToCart(item)}}\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                      className={classes.button}\r\n                      startIcon={<ShoppingCartIcon />}\r\n                    >\r\n                      Buy\r\n                    </Button>\r\n                  </CardActions>\r\n                </Card>\r\n              </Grid>\r\n            ))}\r\n          </Grid>\r\n          </>:null}\r\n          <Snackbar open={open} autoHideDuration={1000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"success\">\r\n              เพิ่มลงตะกร้าเรียบร้อยเเล้ว !!\r\n            </Alert>\r\n          </Snackbar>\r\n\r\n          <Snackbar open={openerror} autoHideDuration={1000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n              กรุณากรอกข้อมูลให้ครบ !!\r\n            </Alert>\r\n          </Snackbar>\r\n          \r\n        </Container>\r\n      </main>\r\n      <footer className={classes.footer}>\r\n        <Typography variant=\"h6\" align=\"center\" gutterBottom>\r\n          Footer\r\n        </Typography>\r\n        <Typography variant=\"subtitle1\" align=\"center\" color=\"textSecondary\" component=\"p\">\r\n         ที่อยู่ร้าน .... \r\n        </Typography>\r\n        <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\r\n            {'Copyright © Kaidee Restaurant '}\r\n            Your Website Kaidee Restaurant\r\n            \r\n            {new Date().getFullYear()}\r\n            {'.'}\r\n        </Typography>\r\n      </footer>\r\n\r\n      <Dialog\r\n          open={showModal}\r\n          maxWidth=\"lg\"\r\n          onClose={handleClosemodal}\r\n          TransitionComponent={Transition}\r\n          aria-labelledby=\"alert-dialog-slide-title\"\r\n          aria-describedby=\"alert-dialog-slide-description\"\r\n      >\r\n     <DialogTitle style={{textAlign:'center'}} id=\"alert-dialog-title\">{\"รายการอาหารที่อยู่ในตะกร้า\"}</DialogTitle>\r\n      <form className={classes.root} noValidate autoComplete=\"off\">\r\n        <TextField\r\n          variant=\"outlined\"\r\n          margin=\"normal\"\r\n          required\r\n          id=\"name\"\r\n          label=\"ชื่อผู้สั่ง\"\r\n          name=\"name\"\r\n          type=\"text\"\r\n          onChange={handleChangeReserveData}\r\n        />\r\n        \r\n        <TextField\r\n          variant=\"outlined\"\r\n          margin=\"normal\"\r\n          required\r\n          id=\"table\"\r\n          label=\"หมายเลขโต๊ะ\"\r\n          name=\"table\"\r\n          type=\"number\"\r\n          onChange={handleChangeReserveData}\r\n        />\r\n      </form>\r\n        \r\n        <DialogContent>\r\n          <DialogContentText id=\"alert-dialog-description\">\r\n            <TableHead>\r\n              <TableRow >\r\n                <TableCell align='center' width='150'>ลำดับ</TableCell>\r\n                <TableCell align='center' width='200'>ชื่อรายการ</TableCell>\r\n                <TableCell align='center' width='200'>ราคา</TableCell>\r\n                <TableCell align='center' width='200'>จำนวน</TableCell>\r\n                <TableCell align='center' width='200'>รวม</TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {(indexFood.length > 0 ) ? <>\r\n              {indexFood.map((item, index) =>\r\n                <TableRow key={index+1}>\r\n                  <TableCell align=\"center\">{index+1}</TableCell>\r\n                  <TableCell align=\"center\">{item.name_food} {item.name_food_en}</TableCell>\r\n                  <TableCell align=\"center\">{derlimiter(item.price)}</TableCell>\r\n                  <TableCell align=\"center\">{item.qty}</TableCell>\r\n                  <TableCell align=\"center\">{derlimiter(item.qty * item.price)}</TableCell>\r\n                </TableRow>\r\n              )}\r\n              </>:null}\r\n            </TableBody>\r\n            <TableFooter>\r\n              <TableRow>\r\n                <TableCell rowSpan={4} />\r\n                <TableCell colSpan={1}></TableCell>\r\n                <TableCell align=\"center\">รวม</TableCell> \r\n                <TableCell align=\"center\">{count}</TableCell> \r\n                        {(totalPrice > 0) ?\r\n                <>\r\n                <TableCell align=\"center\">{derlimiter(totalPrice)}</TableCell>\r\n                </>\r\n                : <TableCell align=\"center\">0</TableCell> }\r\n              </TableRow>\r\n            </TableFooter>\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button\r\n            onClick={()=>{SaveOrder()}}\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            className={classes.button}\r\n            startIcon={<ShoppingCartIcon />}\r\n            >\r\n            ยืนยันสั่งออร์เดอร์\r\n          </Button>\r\n        </DialogActions>\r\n        \r\n      </Dialog>\r\n\r\n    </React.Fragment>\r\n  );\r\n}","D:\\FoodReact\\frontend\\src\\component\\UserOrderFod.js",["73","74","75","76","77","78","79","80","81","82","83","84","85","86","87","88"],"D:\\FoodReact\\frontend\\src\\component\\User.js",["89","90"],"import React, {useEffect, useState} from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Radio from '@material-ui/core/Radio';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControl from '@material-ui/core/FormControl';\nimport axios from 'axios';\nimport { hostname } from './Connect';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport Swal from 'sweetalert2';\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    '& > *': {\n      margin: theme.spacing(1),\n    },\n  },\n}));\n\nexport default function User() {\n  const classes = useStyles();\n  const [showModal , setShowModal] = useState(false)\n  const [user , setUser] = useState(false)\n  const [level , setLevel] = useState(\"admin\")\n  const [userlist , setUserlist] = useState(false)\n\n  useEffect(()=>{\n   LoadUser()\n  },[])\n\n  const LoadUser = async()=>{\n   let url = hostname + '/user/load_user'\n   let rs = await axios.get(url)\n   // console.log(rs.data)\n   setUserlist(rs.data)\n  }\n  const handleClose = () => {\n   setShowModal(false);\n  };\n\n  const handleChangeReserveData=(e)=>{\n   setUser({...user , [e.target.name]: e.target.value})\n  }\n\n  const handleChange = (e) => {\n   setLevel(e.target.value);\n  };\n  const SaveUser = async() =>{\n   let url = hostname + '/user/save_user'\n   let rs = await axios.post(url,{\n    name : user.name , \n    username : user.username,\n    password : user.password,\n    level : level\n   })\n   if(rs.data.message == 'Save Success'){\n    setShowModal(false);\n    LoadUser()\n    Swal.fire({\n     icon: 'success',\n     title: 'Save Success',\n     showConfirmButton: false,\n     timer: 1500\n    })\n   }else{\n    Swal.fire({\n     icon: 'Error',\n     title: 'Save Error',\n     showConfirmButton: false,\n     timer: 1500\n    })\n   }\n  }\n\n  const deleteUser =  (item)=>{\n   Swal.fire({\n    title: 'จะลบ User นี้หรือไม่?',\n    text: \"คุณต้องการลบใช่ไหม!\",\n    icon: 'warning',\n    showCancelButton: true,\n    confirmButtonColor: '#3085d6',\n    cancelButtonColor: '#d33',\n    confirmButtonText: 'Yes, delete it!'\n  }).then(async(result) => {\n    if (result.isConfirmed) {\n     let url = hostname + '/user/delete_user/'+item.id\n     let rs = await axios.get(url)\n     if(rs.data.message == \"Success\"){\n      Swal.fire({\n       icon: 'success',\n       title: 'Delete Success',\n       showConfirmButton: false,\n       timer: 1500\n      })\n      LoadUser()\n     }else{\n      Swal.fire({\n       icon: 'Error',\n       title: 'Delete Error',\n       showConfirmButton: false,\n       timer: 1500\n      })\n     }\n    }\n  })\n  }\n\n  return (\n   <>\n    <div className={classes.root}>\n      <h3>User / Admin</h3>\n      <Button onClick={() => setShowModal(true)} style={{width : \"15%\"}} variant=\"contained\" color=\"primary\">\n        เพิ่ม User\n      </Button>\n    </div>\n    <Dialog\n        open={showModal}\n        onClose={handleClose}\n        aria-labelledby=\"alert-dialog-title\"\n        aria-describedby=\"alert-dialog-description\"\n    >\n     <DialogTitle id=\"alert-dialog-title\">{\"User Account\"}</DialogTitle>\n        <DialogContent>\n          <DialogContentText id=\"alert-dialog-description\">\n          <form className={classes.form} noValidate>\n            <TextField\n              variant=\"outlined\"\n              margin=\"normal\"\n              required\n              fullWidth\n              id=\"name\"\n              label=\"ชื่อ\"\n              name=\"name\"\n              autoFocus\n              onChange={handleChangeReserveData}\n            />\n            <TextField\n              variant=\"outlined\"\n              margin=\"normal\"\n              required\n              fullWidth\n              id=\"Username\"\n              label=\"Username\"\n              name=\"username\"\n              autoFocus\n              onChange={handleChangeReserveData}\n            />\n            <TextField\n              variant=\"outlined\"\n              margin=\"normal\"\n              required\n              fullWidth\n              name=\"password\"\n              label=\"Password\"\n              type=\"password\"\n              id=\"password\"\n              onChange={handleChangeReserveData}\n            />\n             <div>\n              <FormControl>\n                <RadioGroup aria-label=\"quiz\" name=\"quiz\" value={level} onChange={handleChange}>\n                  <FormControlLabel value=\"admin\" control={<Radio />} label=\"Admin\" />\n                  <FormControlLabel value=\"user\" control={<Radio />} label=\"User\" />\n                </RadioGroup>\n              </FormControl>\n            </div>\n          </form>\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={()=>{SaveUser()}} color=\"primary\">\n            Save\n          </Button>\n        </DialogActions>\n      </Dialog>\n      <br />\n\n      <TableContainer component={Paper}>\n       <Table className={classes.table} aria-label=\"simple table\">\n         <TableHead>\n           <TableRow>\n             <TableCell>ชื่อผู้ใช้งานระบบ</TableCell>\n             <TableCell align=\"right\">Username</TableCell>\n             <TableCell align=\"right\">Level</TableCell>\n             <TableCell align=\"right\"></TableCell>\n           </TableRow>\n         </TableHead>\n         <TableBody>\n          {(userlist.length > 0) ? \n              <>\n               {userlist.map((item) => (\n             <TableRow>\n               <TableCell component=\"th\" scope=\"row\">\n                 {item.name}\n               </TableCell>\n               <TableCell align=\"right\">{item.username}</TableCell>\n               <TableCell align=\"right\">{item.level}</TableCell>\n               <TableCell align=\"right\">\n                <Button\n                    onClick={()=>{deleteUser(item)}}\n                    variant=\"contained\"\n                    color=\"secondary\"\n                    className={classes.button}\n                    startIcon={<DeleteIcon />}\n                  >\n                    Delete\n                  </Button>\n               </TableCell>\n             </TableRow>\n           ))}\n              </>\n              :null}\n         </TableBody>\n       </Table>\n     </TableContainer>\n   </>\n  );\n}\n","D:\\FoodReact\\frontend\\src\\component\\TypeFood.js",["91","92","93","94","95","96"],"import React, {useEffect, useState} from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport axios from 'axios';\r\nimport { hostname } from './Connect';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport Swal from 'sweetalert2';\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    '& > *': {\r\n      margin: theme.spacing(1),\r\n    },\r\n  },\r\n}));\r\n\r\n\r\nexport default function Groupproduct() {\r\n  const classes = useStyles();\r\n  const [showModal , setShowModal] = useState(false)\r\n  const [typefood , setTypefood] = useState(false)\r\n  const [typefoodlist , setTypefoodlist] = useState(false)\r\n\r\n  useEffect(()=>{\r\n    LoadTpefood()\r\n  },[])\r\n\r\n  const LoadTpefood = async()=>{\r\n   let url = hostname + '/type_food/load_type_food'\r\n   let rs = await axios.get(url)\r\n   setTypefoodlist(rs.data)\r\n  }\r\n  const handleClose = () => {\r\n   setShowModal(false);\r\n  };\r\n\r\n  const handleChangeReserveData=(e)=>{\r\n    setTypefood({...typefood , [e.target.name]: e.target.value})\r\n  }\r\n\r\n\r\n  const SaveTypefood = async() =>{\r\n    // console.log(typefood)\r\n   let url = hostname + '/type_food/save_type_food'\r\n   let rs = await axios.post(url,{\r\n    group_food_code : typefood.group_food_code , \r\n    name_group_food : typefood.name_group_food,\r\n    name_group_food_en : typefood.name_group_food_en\r\n   })\r\n   if(rs.data.message == 'Save Success'){\r\n    setShowModal(false);\r\n    LoadTpefood()\r\n    Swal.fire({\r\n     icon: 'success',\r\n     title: 'Save Success',\r\n     showConfirmButton: false,\r\n     timer: 1500\r\n    })\r\n   }else{\r\n    Swal.fire({\r\n     icon: 'Error',\r\n     title: 'Save Error',\r\n     showConfirmButton: false,\r\n     timer: 1500\r\n    })\r\n   }\r\n  }\r\n\r\n  const deleteTypeFood =  (item)=>{\r\n   Swal.fire({\r\n    title: 'จะลบ ประเภทอาหาร นี้หรือไม่?',\r\n    text: \"คุณต้องการลบใช่ไหม!\",\r\n    icon: 'warning',\r\n    showCancelButton: true,\r\n    confirmButtonColor: '#3085d6',\r\n    cancelButtonColor: '#d33',\r\n    confirmButtonText: 'Yes, delete it!'\r\n  }).then(async(result) => {\r\n    if (result.isConfirmed) {\r\n     let url = hostname + '/type_food/delete_type_food/'+item.id\r\n     let rs = await axios.get(url)\r\n     if(rs.data.message == \"Success\"){\r\n      Swal.fire({\r\n       icon: 'success',\r\n       title: 'Delete Success',\r\n       showConfirmButton: false,\r\n       timer: 1500\r\n      })\r\n      LoadTpefood()\r\n     }else{\r\n      Swal.fire({\r\n       icon: 'Error',\r\n       title: 'Delete Error',\r\n       showConfirmButton: false,\r\n       timer: 1500\r\n      })\r\n     }\r\n    }\r\n  })\r\n  }\r\n\r\n  return (\r\n   <>\r\n    <div className={classes.root}>\r\n      <h3>ประเภทอาหาร</h3>\r\n      <Button onClick={() => setShowModal(true)} style={{width : \"15%\"}} variant=\"contained\" color=\"primary\">\r\n        เพิ่ม ประเภทอาหาร\r\n      </Button>\r\n    </div>\r\n    <Dialog\r\n        open={showModal}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"alert-dialog-title\"\r\n        aria-describedby=\"alert-dialog-description\"\r\n    >\r\n     <DialogTitle id=\"alert-dialog-title\">{\"เพิ่ม ประเภทอาหาร\"}</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText id=\"alert-dialog-description\">\r\n          <form className={classes.form} noValidate>\r\n            <TextField\r\n              variant=\"outlined\"\r\n              margin=\"normal\"\r\n              required\r\n              fullWidth\r\n              id=\"name_group_food\"\r\n              label=\"ชื่อ\"\r\n              name=\"name_group_food\"\r\n              autoFocus\r\n              onChange={handleChangeReserveData}\r\n            />\r\n            <TextField\r\n              variant=\"outlined\"\r\n              margin=\"normal\"\r\n              required\r\n              fullWidth\r\n              id=\"name_group_food_en\"\r\n              label=\"ชื่อภาษาอังกฤษ\"\r\n              name=\"name_group_food_en\"\r\n              onChange={handleChangeReserveData}\r\n            />\r\n            <TextField\r\n              variant=\"outlined\"\r\n              margin=\"normal\"\r\n              required\r\n              fullWidth\r\n              name=\"group_food_code\"\r\n              label=\"รหัสประเภทอาหาร\"\r\n              type=\"text\"\r\n              id=\"group_food_code\"\r\n              onChange={handleChangeReserveData}\r\n            />\r\n             <div>\r\n            </div>\r\n          </form>\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={()=>{SaveTypefood()}} color=\"primary\">\r\n            Save\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n      <br />\r\n\r\n      <TableContainer component={Paper}>\r\n       <Table className={classes.table} aria-label=\"simple table\">\r\n         <TableHead>\r\n           <TableRow>\r\n             <TableCell align=\"center\">รหัสประเภทอาหาร</TableCell>\r\n             <TableCell align=\"center\">ชื่อ</TableCell>\r\n             <TableCell align=\"center\">ชื่อภาษาอังกฤษ</TableCell>\r\n             <TableCell align=\"center\"></TableCell>\r\n           </TableRow>\r\n         </TableHead>\r\n         <TableBody>\r\n          {(typefoodlist.length > 0) ? \r\n              <>\r\n               {typefoodlist.map((item) => (\r\n             <TableRow>\r\n               <TableCell align=\"center\" component=\"th\" scope=\"row\">{item.group_food_code}</TableCell>\r\n               <TableCell align=\"center\">{item.name_group_food}</TableCell>\r\n               <TableCell align=\"center\">{item.name_group_food_en}</TableCell>\r\n               <TableCell align=\"center\">\r\n                <Button\r\n                    onClick={()=>{deleteTypeFood(item)}}\r\n                    variant=\"contained\"\r\n                    color=\"secondary\"\r\n                    className={classes.button}\r\n                    startIcon={<DeleteIcon />}\r\n                  >\r\n                    Delete\r\n                  </Button>\r\n               </TableCell>\r\n             </TableRow>\r\n           ))}\r\n              </>\r\n              :null}\r\n         </TableBody>\r\n       </Table>\r\n     </TableContainer>\r\n   </>\r\n  );\r\n}\r\n","D:\\FoodReact\\frontend\\src\\component\\Food.js",["97","98","99","100","101","102"],"import React, {useEffect, useState} from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport axios from 'axios';\r\nimport { hostname } from './Connect';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport Swal from 'sweetalert2';\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    '& > *': {\r\n      margin: theme.spacing(1),\r\n    },\r\n  },\r\n}));\r\n\r\n\r\nexport default function Food() {\r\n  const classes = useStyles();\r\n  const [showModal , setShowModal] = useState(false)\r\n  const [food , setFood] = useState(false)\r\n  // const [level , setLevel] = useState(\"admin\")\r\n  const [foodlist , setFoodlist] = useState(false)\r\n\r\n  useEffect(()=>{\r\n    LoadTpefood()\r\n  },[])\r\n\r\n  const LoadTpefood = async()=>{\r\n   let url = hostname + '/food/load_food'\r\n   let rs = await axios.get(url)\r\n   setFoodlist(rs.data)\r\n  }\r\n  const handleClose = () => {\r\n   setShowModal(false);\r\n  };\r\n\r\n  const handleChangeReserveData=(e)=>{\r\n    setFood({...food , [e.target.name]: e.target.value})\r\n  }\r\n  \r\n  const Savefood = async() =>{\r\n   let url = hostname + '/food/save_food'\r\n   let rs = await axios.post(url,{\r\n    name_food : food.name_food , \r\n    name_food_en : food.name_food_en,\r\n    price_food : Number(food.price_food),\r\n    detail_food : food.detail_food\r\n   })\r\n   if(rs.data.message == 'Save Success'){\r\n    setShowModal(false);\r\n    LoadTpefood()\r\n    Swal.fire({\r\n     icon: 'success',\r\n     title: 'Save Success',\r\n     showConfirmButton: false,\r\n     timer: 1500\r\n    })\r\n   }else{\r\n    Swal.fire({\r\n     icon: 'Error',\r\n     title: 'Save Error',\r\n     showConfirmButton: false,\r\n     timer: 1500\r\n    })\r\n   }\r\n  }\r\n\r\n  const deleteFood =  (item)=>{\r\n   Swal.fire({\r\n    title: 'จะลบ รายการอาหาร นี้หรือไม่?',\r\n    text: \"คุณต้องการลบใช่ไหม!\",\r\n    icon: 'warning',\r\n    showCancelButton: true,\r\n    confirmButtonColor: '#3085d6',\r\n    cancelButtonColor: '#d33',\r\n    confirmButtonText: 'Yes, delete it!'\r\n  }).then(async(result) => {\r\n    if (result.isConfirmed) {\r\n     let url = hostname + '/food/delete_food/'+item.id\r\n     let rs = await axios.get(url)\r\n     if(rs.data.message == \"Success\"){\r\n      Swal.fire({\r\n       icon: 'success',\r\n       title: 'Delete Success',\r\n       showConfirmButton: false,\r\n       timer: 1500\r\n      })\r\n      LoadTpefood()\r\n     }else{\r\n      Swal.fire({\r\n       icon: 'Error',\r\n       title: 'Delete Error',\r\n       showConfirmButton: false,\r\n       timer: 1500\r\n      })\r\n     }\r\n    }\r\n  })\r\n  }\r\n\r\n  return (\r\n   <>\r\n    <div className={classes.root}>\r\n      <h3>รายการอาหาร</h3>\r\n      <Button onClick={() => setShowModal(true)} style={{width : \"15%\"}} variant=\"contained\" color=\"primary\">\r\n        เพิ่ม รายการอาหาร\r\n      </Button>\r\n    </div>\r\n      <Dialog\r\n          open={showModal}\r\n          onClose={handleClose}\r\n          aria-labelledby=\"alert-dialog-title\"\r\n          aria-describedby=\"alert-dialog-description\"\r\n      >\r\n     <DialogTitle id=\"alert-dialog-title\">{\"เพิ่ม รายการอาหาร\"}</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText id=\"alert-dialog-description\">\r\n          <form className={classes.form} noValidate>\r\n            <TextField\r\n              variant=\"outlined\"\r\n              margin=\"normal\"\r\n              required\r\n              fullWidth\r\n              id=\"name_food\"\r\n              label=\"ชื่อ\"\r\n              name=\"name_food\"\r\n              autoFocus\r\n              onChange={handleChangeReserveData}\r\n            />\r\n            <TextField\r\n              variant=\"outlined\"\r\n              margin=\"normal\"\r\n              required\r\n              fullWidth\r\n              id=\"name_food_en\"\r\n              label=\"ชื่อภาษาอังกฤษ\"\r\n              name=\"name_food_en\"\r\n              onChange={handleChangeReserveData}\r\n            />\r\n            <TextField\r\n              variant=\"outlined\"\r\n              margin=\"normal\"\r\n              required\r\n              fullWidth\r\n              name=\"price_food\"\r\n              label=\"ราคา\"\r\n              type=\"number\"\r\n              id=\"price_food\"\r\n              onChange={handleChangeReserveData}\r\n            />\r\n            <TextField\r\n              variant=\"outlined\"\r\n              margin=\"normal\"\r\n              required\r\n              fullWidth\r\n              id=\"detail_food\"\r\n              label=\"รายละเอียดอาหาร\"\r\n              name=\"detail_food\"\r\n              onChange={handleChangeReserveData}\r\n            />\r\n             <div>\r\n            </div>\r\n          </form>\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={()=>{Savefood()}} color=\"primary\">\r\n            Save\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n      <br />\r\n\r\n      <TableContainer component={Paper}>\r\n       <Table className={classes.table} aria-label=\"simple table\">\r\n         <TableHead>\r\n           <TableRow>\r\n             <TableCell align=\"center\">ชื่ออาหาร</TableCell>\r\n             <TableCell align=\"center\">ชื่อภาษาอังกฤษ</TableCell>\r\n             <TableCell align=\"right\">ราคา</TableCell>\r\n             <TableCell align=\"center\">รายละเอียดอาหาร</TableCell>\r\n             <TableCell align=\"center\"></TableCell>\r\n           </TableRow>\r\n         </TableHead>\r\n         <TableBody>\r\n          {(foodlist.length > 0) ? \r\n              <>\r\n               {foodlist.map((item) => (\r\n             <TableRow>\r\n               <TableCell component=\"th\" align=\"center\" scope=\"row\" style={{minWidth : 150}}>{item.name_food}</TableCell>\r\n               <TableCell align=\"center\" style={{minWidth : 150}}>{item.name_food_en}</TableCell>\r\n               <TableCell align=\"right\" style={{minWidth : 150}}>{item.price_food}</TableCell>\r\n               <TableCell align=\"center\" style={{minWidth : 150}} >{item.detail_food}</TableCell>\r\n               <TableCell align=\"center\">\r\n                <Button\r\n                    onClick={()=>{deleteFood(item)}}\r\n                    variant=\"contained\"\r\n                    color=\"secondary\"\r\n                    className={classes.button}\r\n                    startIcon={<DeleteIcon />}\r\n                  >\r\n                    Delete\r\n                  </Button>\r\n               </TableCell>\r\n             </TableRow>\r\n           ))}\r\n              </>\r\n              :null}\r\n         </TableBody>\r\n       </Table>\r\n     </TableContainer>\r\n   </>\r\n  );\r\n}\r\n","D:\\FoodReact\\frontend\\src\\component\\Connect.js",[],"D:\\FoodReact\\frontend\\src\\component\\modal\\detail.js",[],{"ruleId":"103","replacedBy":"104"},{"ruleId":"105","replacedBy":"106"},{"ruleId":"107","severity":1,"message":"108","line":6,"column":3,"nodeType":"109","messageId":"110","endLine":6,"endColumn":7},{"ruleId":"107","severity":1,"message":"111","line":23,"column":8,"nodeType":"109","messageId":"110","endLine":23,"endColumn":24},{"ruleId":"107","severity":1,"message":"108","line":30,"column":2,"nodeType":"109","messageId":"110","endLine":30,"endColumn":6},{"ruleId":"107","severity":1,"message":"112","line":1,"column":28,"nodeType":"109","messageId":"110","endLine":1,"endColumn":37},{"ruleId":"113","severity":1,"message":"114","line":43,"column":23,"nodeType":"115","messageId":"116","endLine":43,"endColumn":25},{"ruleId":"107","severity":1,"message":"108","line":16,"column":8,"nodeType":"109","messageId":"110","endLine":16,"endColumn":12},{"ruleId":"107","severity":1,"message":"117","line":31,"column":3,"nodeType":"109","messageId":"110","endLine":31,"endColumn":8},{"ruleId":"107","severity":1,"message":"118","line":32,"column":3,"nodeType":"109","messageId":"110","endLine":32,"endColumn":8},{"ruleId":"107","severity":1,"message":"119","line":35,"column":3,"nodeType":"109","messageId":"110","endLine":35,"endColumn":17},{"ruleId":"113","severity":1,"message":"114","line":191,"column":14,"nodeType":"115","messageId":"116","endLine":191,"endColumn":16},{"ruleId":"113","severity":1,"message":"114","line":191,"column":38,"nodeType":"115","messageId":"116","endLine":191,"endColumn":40},{"ruleId":"113","severity":1,"message":"114","line":191,"column":58,"nodeType":"115","messageId":"116","endLine":191,"endColumn":60},{"ruleId":"113","severity":1,"message":"114","line":200,"column":26,"nodeType":"115","messageId":"116","endLine":200,"endColumn":28},{"ruleId":"107","severity":1,"message":"120","line":3,"column":8,"nodeType":"109","messageId":"110","endLine":3,"endColumn":14},{"ruleId":"107","severity":1,"message":"121","line":4,"column":8,"nodeType":"109","messageId":"110","endLine":4,"endColumn":21},{"ruleId":"107","severity":1,"message":"122","line":5,"column":8,"nodeType":"109","messageId":"110","endLine":5,"endColumn":21},{"ruleId":"107","severity":1,"message":"123","line":6,"column":8,"nodeType":"109","messageId":"110","endLine":6,"endColumn":25},{"ruleId":"107","severity":1,"message":"124","line":7,"column":8,"nodeType":"109","messageId":"110","endLine":7,"endColumn":19},{"ruleId":"107","severity":1,"message":"125","line":9,"column":8,"nodeType":"109","messageId":"110","endLine":9,"endColumn":17},{"ruleId":"107","severity":1,"message":"126","line":10,"column":8,"nodeType":"109","messageId":"110","endLine":10,"endColumn":13},{"ruleId":"107","severity":1,"message":"127","line":11,"column":8,"nodeType":"109","messageId":"110","endLine":11,"endColumn":24},{"ruleId":"107","severity":1,"message":"128","line":12,"column":8,"nodeType":"109","messageId":"110","endLine":12,"endColumn":18},{"ruleId":"107","severity":1,"message":"129","line":13,"column":8,"nodeType":"109","messageId":"110","endLine":13,"endColumn":19},{"ruleId":"107","severity":1,"message":"130","line":38,"column":10,"nodeType":"109","messageId":"110","endLine":38,"endColumn":19},{"ruleId":"107","severity":1,"message":"131","line":38,"column":22,"nodeType":"109","messageId":"110","endLine":38,"endColumn":34},{"ruleId":"107","severity":1,"message":"132","line":40,"column":10,"nodeType":"109","messageId":"110","endLine":40,"endColumn":15},{"ruleId":"107","severity":1,"message":"133","line":57,"column":9,"nodeType":"109","messageId":"110","endLine":57,"endColumn":32},{"ruleId":"107","severity":1,"message":"134","line":61,"column":9,"nodeType":"109","messageId":"110","endLine":61,"endColumn":21},{"ruleId":"113","severity":1,"message":"114","line":84,"column":25,"nodeType":"115","messageId":"116","endLine":84,"endColumn":27},{"ruleId":"113","severity":1,"message":"114","line":69,"column":23,"nodeType":"115","messageId":"116","endLine":69,"endColumn":25},{"ruleId":"113","severity":1,"message":"114","line":101,"column":25,"nodeType":"115","messageId":"116","endLine":101,"endColumn":27},{"ruleId":"107","severity":1,"message":"126","line":10,"column":8,"nodeType":"109","messageId":"110","endLine":10,"endColumn":13},{"ruleId":"107","severity":1,"message":"127","line":11,"column":8,"nodeType":"109","messageId":"110","endLine":11,"endColumn":24},{"ruleId":"107","severity":1,"message":"128","line":12,"column":8,"nodeType":"109","messageId":"110","endLine":12,"endColumn":18},{"ruleId":"107","severity":1,"message":"129","line":13,"column":8,"nodeType":"109","messageId":"110","endLine":13,"endColumn":19},{"ruleId":"113","severity":1,"message":"114","line":66,"column":23,"nodeType":"115","messageId":"116","endLine":66,"endColumn":25},{"ruleId":"113","severity":1,"message":"114","line":98,"column":25,"nodeType":"115","messageId":"116","endLine":98,"endColumn":27},{"ruleId":"107","severity":1,"message":"126","line":10,"column":8,"nodeType":"109","messageId":"110","endLine":10,"endColumn":13},{"ruleId":"107","severity":1,"message":"127","line":11,"column":8,"nodeType":"109","messageId":"110","endLine":11,"endColumn":24},{"ruleId":"107","severity":1,"message":"128","line":12,"column":8,"nodeType":"109","messageId":"110","endLine":12,"endColumn":18},{"ruleId":"107","severity":1,"message":"129","line":13,"column":8,"nodeType":"109","messageId":"110","endLine":13,"endColumn":19},{"ruleId":"113","severity":1,"message":"114","line":66,"column":23,"nodeType":"115","messageId":"116","endLine":66,"endColumn":25},{"ruleId":"113","severity":1,"message":"114","line":98,"column":25,"nodeType":"115","messageId":"116","endLine":98,"endColumn":27},"no-native-reassign",["135"],"no-negated-in-lhs",["136"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'ShoppingCartIcon' is defined but never used.","'useEffect' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Paper' is defined but never used.","'Table' is defined but never used.","'TableContainer' is defined but never used.","'Dialog' is defined but never used.","'DialogActions' is defined but never used.","'DialogContent' is defined but never used.","'DialogContentText' is defined but never used.","'DialogTitle' is defined but never used.","'TextField' is defined but never used.","'Radio' is defined but never used.","'FormControlLabel' is defined but never used.","'RadioGroup' is defined but never used.","'FormControl' is defined but never used.","'showModal' is assigned a value but never used.","'setShowModal' is assigned a value but never used.","'level' is assigned a value but never used.","'handleChangeReserveData' is assigned a value but never used.","'handleChange' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]